"""
Dataset Generation
Topology Optimization of the Base Cell of a Periodic Metamaterial
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2023
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Metamaterial-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2023 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

import os, sys
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.collections as clct

from adjust import adjust

sys.path.append('../../source/python/SILP/')
from mesh import get_mesh

file_ini      = 0      # initial file index |from file 0
file_lim      = 2      # file index limit   |up to file 2625
fig_top_opt   = True   # optimized topology
fig_top       = True   # topology vectors
fig_sen       = True   # sensitivity vectors
fig_dis       = True   # displacements vectors
fig_nu_Ey_vol = True   # Poisson's ratio, Young's modulus and volume

# fixed properties
Ns = 32    # number of elements in each side of the design domain
N = Ns**2  # number of elements in the design domain
Nt = 6*N   # number of elements in the base cell

# area = 6*Lx*Ly = 1.0
Lx = 1.0/(108**0.25)  # design domain shorter side
Ly = np.sqrt(3)*Lx    # design domain longer side
Lex = Lx/Ns           # element shorter side
Ley = np.sqrt(3)*Lex  # element longer side

# Generate Mesh
coor, inci, etype, sym = get_mesh(Ns, Lex, Ley)

# check directories
rpath = '../../dataset/SILP/'
if not os.path.exists(rpath):
    print('missing SILP dataset')
    sys.exit()
if not os.path.exists('./top_opt'):
    os.mkdir('./top_opt')
if not os.path.exists('./top'):
    os.mkdir('./top')
if not os.path.exists('./sen'):
    os.mkdir('./sen')
if not os.path.exists('./dis'):
    os.mkdir('./dis')
if not os.path.exists('./nu_Ey_vol'):
    os.mkdir('./nu_Ey_vol')

file = file_ini
while (file < file_lim) and (os.path.exists(rpath + 'f{:04d}'.format(file))):
    #%% Read files
    print('> reading files of f{:04d}'.format(file))

    # input files id, input data and pointers to optimization
    if not os.path.exists(rpath + 'f{:04d}/fid.npy'.format(file)):
        print('missing : f{:04d}/fid.npy'.format(file))
        sys.exit()
    list_fid = np.load(rpath + 'f{:04d}/fid.npy'.format(file))
    if not os.path.exists(rpath + 'f{:04d}/inp.npy'.format(file)):
        print('missing : f{:04d}/inp.npy'.format(file))
        sys.exit()
    list_inp = np.load(rpath + 'f{:04d}/inp.npy'.format(file))
    if not os.path.exists(rpath + 'f{:04d}/ptr2opt.npy'.format(file)):
        print('missing : f{:04d}/ptr2opt.npy'.format(file))
        sys.exit()
    list_ptr2opt = np.load(rpath + 'f{:04d}/ptr2opt.npy'.format(file))
    
    # optimized topology
    if fig_top_opt:
        if not os.path.exists(rpath + 'f{:04d}/top_opt.npy'.format(file)):
            print('missing : f{:04d}/top_opt.npy'.format(file))
            sys.exit()
        list_top_opt = np.load(rpath + 'f{:04d}/top_opt.npy'.format(file))
    
    # topology vectors
    if fig_top or fig_dis:
        if not os.path.exists(rpath + 'f{:04d}/top.npy'.format(file)):
            print('missing : f{:04d}/top.npy'.format(file))
            sys.exit()
        list_top = np.load(rpath + 'f{:04d}/top.npy'.format(file))
        
    # sensitivity vectors
    if fig_sen:
        if not os.path.exists(rpath + 'f{:04d}/dC00_0.npy'.format(file)):
            print('missing : f{:04d}/dC00_0.npy'.format(file))
            sys.exit()
        list_dC00_0 = np.load(rpath + 'f{:04d}/dC00_0.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC00_1.npy'.format(file)):
            print('missing : f{:04d}/dC00_1.npy'.format(file))
            sys.exit()
        list_dC00_1 = np.load(rpath + 'f{:04d}/dC00_1.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC00_2.npy'.format(file)):
            print('missing : f{:04d}/dC00_2.npy'.format(file))
            sys.exit()
        list_dC00_2 = np.load(rpath + 'f{:04d}/dC00_2.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC00_w.npy'.format(file)):
            print('missing : f{:04d}/dC00_w.npy'.format(file))
            sys.exit()
        list_dC00_w = np.load(rpath + 'f{:04d}/dC00_w.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC11_0.npy'.format(file)):
            print('missing : f{:04d}/dC11_0.npy'.format(file))
            sys.exit()
        list_dC11_0 = np.load(rpath + 'f{:04d}/dC11_0.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC11_1.npy'.format(file)):
            print('missing : f{:04d}/dC11_1.npy'.format(file))
            sys.exit()
        list_dC11_1 = np.load(rpath + 'f{:04d}/dC11_1.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC11_2.npy'.format(file)):
            print('missing : f{:04d}/dC11_2.npy'.format(file))
            sys.exit()
        list_dC11_2 = np.load(rpath + 'f{:04d}/dC11_2.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC11_w.npy'.format(file)):
            print('missing : f{:04d}/dC11_w.npy'.format(file))
            sys.exit()
        list_dC11_w = np.load(rpath + 'f{:04d}/dC11_w.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC22_0.npy'.format(file)):
            print('missing : f{:04d}/dC22_0.npy'.format(file))
            sys.exit()
        list_dC22_0 = np.load(rpath + 'f{:04d}/dC22_0.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC22_1.npy'.format(file)):
            print('missing : f{:04d}/dC22_1.npy'.format(file))
            sys.exit()
        list_dC22_1 = np.load(rpath + 'f{:04d}/dC22_1.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC22_2.npy'.format(file)):
            print('missing : f{:04d}/dC22_2.npy'.format(file))
            sys.exit()
        list_dC22_2 = np.load(rpath + 'f{:04d}/dC22_2.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dC22_w.npy'.format(file)):
            print('missing : f{:04d}/dC22_w.npy'.format(file))
            sys.exit()
        list_dC22_w = np.load(rpath + 'f{:04d}/dC22_w.npy'.format(file))
        
    # displacements vectors
    if fig_dis:
        if not os.path.exists(rpath + 'f{:04d}/dis_xx.npy'.format(file)):
            print('missing : f{:04d}/dis_xx.npy'.format(file))
            sys.exit()
        list_dis_xx = np.load(rpath + 'f{:04d}/dis_xx.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dis_yy.npy'.format(file)):
            print('missing : f{:04d}/dis_yy.npy'.format(file))
            sys.exit()
        list_dis_yy = np.load(rpath + 'f{:04d}/dis_yy.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/dis_xy.npy'.format(file)):
            print('missing : f{:04d}/dis_xy.npy'.format(file))
            sys.exit()
        list_dis_xy = np.load(rpath + 'f{:04d}/dis_xy.npy'.format(file))
        
    # Poisson's ratio, Young's modulus and volume
    if fig_nu_Ey_vol:
        if not os.path.exists(rpath + 'f{:04d}/nu.npy'.format(file)):
            print('missing : f{:04d}/nu.npy'.format(file))
            sys.exit()
        list_nu = np.load(rpath + 'f{:04d}/nu.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/Ey.npy'.format(file)):
            print('missing : f{:04d}/Ey.npy'.format(file))
            sys.exit()
        list_Ey = np.load(rpath + 'f{:04d}/Ey.npy'.format(file))
        if not os.path.exists(rpath + 'f{:04d}/vol.npy'.format(file)):
            print('missing : f{:04d}/vol.npy'.format(file))
            sys.exit()
        list_vol = np.load(rpath + 'f{:04d}/vol.npy'.format(file))
    
    #%% Generate figures
    print(': generating figures')
    
    # optimized topology
    if fig_top_opt:
        print(': : optimized topology...')
        for k in range(len(list_fid)):
            plt.figure(num=0).clear()
            fig,ax = plt.subplots(num=0)
            fid = list_fid[k]
            x = list_top_opt[k]
            x = np.unpackbits(x,axis=None).astype(float)
            xt = np.ndarray((Nt),dtype=bool)
            for k in range(N):
                xt[sym[k,:]] = x[k]
            polys = clct.PolyCollection(coor[inci],cmap='gray_r',edgecolor=(0,0,0,0))
            polys.set_array(xt+1.0)
            polys.set_clim(0.0,2.0)
            ax.add_collection(polys)
            ax.set_aspect('equal')
            ax.set_xlim([-2*Lx,2*Lx])
            ax.set_ylim([-Ly,Ly])
            ax.axis('off')
            fig.set_size_inches(8,7)
            plt.savefig('./top_opt/f{:05d}.png'.format(fid),bbox_inches='tight',pad_inches=0.05,dpi=100)

    # topology vectors
    if fig_top:
        print(': : topology vectors...')
        for k in range(len(list_fid)):
            fid = list_fid[k]
            j = 0
            for kk in range(list_ptr2opt[k],list_ptr2opt[k+1]):
                plt.figure(num=0).clear()
                fig,ax = plt.subplots(num=0)
                x = list_top[kk]
                x = np.unpackbits(x,axis=None).astype(float)
                xt = np.ndarray((Nt),dtype=bool)
                for k in range(N):
                    xt[sym[k,:]] = x[k]
                polys = clct.PolyCollection(coor[inci],cmap='gray_r',edgecolor=(0,0,0,0))
                polys.set_array(xt+1.0)
                polys.set_clim(0.0,2.0)
                ax.add_collection(polys)
                ax.set_aspect('equal')
                ax.set_xlim([-2*Lx,2*Lx])
                ax.set_ylim([-Ly,Ly])
                ax.axis('off')
                fig.set_size_inches(8,7)
                plt.savefig('./top/f{:05d}_{:03d}.png'.format(fid,j),bbox_inches='tight',pad_inches=0.05,dpi=100)
                j += 1

    # sensitivity vectors
    if fig_sen:
        print(': : sensitivity vectors...')
        for k in range(len(list_fid)):
            fid = list_fid[k]
            j = 0
            for kk in range(list_ptr2opt[k],list_ptr2opt[k+1]):
                plt.figure(num=0).clear()
                fig,ax = plt.subplots(nrows=3,ncols=4,num=0)
                xmin = -2*Lx
                xmax =  2*Lx
                ymin =   -Ly
                ymax =    Ly
                dC00_0 = list_dC00_0[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC00_0,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[0,0].add_collection(polys)
                ax[0,0].set_aspect('equal')
                ax[0,0].set_xlim([xmin,xmax])
                ax[0,0].set_ylim([ymin,ymax])
                ax[0,0].axis('off')
                dC00_1 = list_dC00_1[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC00_1,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[0,1].add_collection(polys)
                ax[0,1].set_aspect('equal')
                ax[0,1].set_xlim([xmin,xmax])
                ax[0,1].set_ylim([ymin,ymax])
                ax[0,1].axis('off')
                dC00_2 = list_dC00_2[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC00_2,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[0,2].add_collection(polys)
                ax[0,2].set_aspect('equal')
                ax[0,2].set_xlim([xmin,xmax])
                ax[0,2].set_ylim([ymin,ymax])
                ax[0,2].axis('off')
                dC00_w = list_dC00_w[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC00_w,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[0,3].add_collection(polys)
                ax[0,3].set_aspect('equal')
                ax[0,3].set_xlim([xmin,xmax])
                ax[0,3].set_ylim([ymin,ymax])
                ax[0,3].axis('off')
                dC11_0 = list_dC11_0[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC11_0,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[1,0].add_collection(polys)
                ax[1,0].set_aspect('equal')
                ax[1,0].set_xlim([xmin,xmax])
                ax[1,0].set_ylim([ymin,ymax])
                ax[1,0].axis('off')
                dC11_1 = list_dC11_1[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC11_1,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[1,1].add_collection(polys)
                ax[1,1].set_aspect('equal')
                ax[1,1].set_xlim([xmin,xmax])
                ax[1,1].set_ylim([ymin,ymax])
                ax[1,1].axis('off')
                dC11_2 = list_dC11_2[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC11_2,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[1,2].add_collection(polys)
                ax[1,2].set_aspect('equal')
                ax[1,2].set_xlim([xmin,xmax])
                ax[1,2].set_ylim([ymin,ymax])
                ax[1,2].axis('off')
                dC11_w = list_dC11_w[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC11_w,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[1,3].add_collection(polys)
                ax[1,3].set_aspect('equal')
                ax[1,3].set_xlim([xmin,xmax])
                ax[1,3].set_ylim([ymin,ymax])
                ax[1,3].axis('off')
                dC22_0 = list_dC22_0[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC22_0,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[2,0].add_collection(polys)
                ax[2,0].set_aspect('equal')
                ax[2,0].set_xlim([xmin,xmax])
                ax[2,0].set_ylim([ymin,ymax])
                ax[2,0].axis('off')
                dC22_1 = list_dC22_1[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC22_1,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[2,1].add_collection(polys)
                ax[2,1].set_aspect('equal')
                ax[2,1].set_xlim([xmin,xmax])
                ax[2,1].set_ylim([ymin,ymax])
                ax[2,1].axis('off')
                dC22_2 = list_dC22_2[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC22_2,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[2,2].add_collection(polys)
                ax[2,2].set_aspect('equal')
                ax[2,2].set_xlim([xmin,xmax])
                ax[2,2].set_ylim([ymin,ymax])
                ax[2,2].axis('off')
                dC22_w = list_dC22_w[kk]
                sens_plot = np.ndarray((Nt))
                adjusted = adjust(dC22_w,N)
                for k in range(N):
                    sens_plot[sym[k,:]] = adjusted[k]
                polys = clct.PolyCollection(coor[inci],cmap='cividis',edgecolor=(0,0,0,0))
                polys.set_array(sens_plot)
                ax[2,3].add_collection(polys)
                ax[2,3].set_aspect('equal')
                ax[2,3].set_xlim([xmin,xmax])
                ax[2,3].set_ylim([ymin,ymax])
                ax[2,3].axis('off')
                fig.set_size_inches(20,13)
                plt.savefig('./sen/f{:05d}_{:03d}.png'.format(fid,j),bbox_inches='tight',pad_inches=0.05,dpi=100)
                j += 1
        
    # displacements vectors
    if fig_dis:
        print(': : displacements vectors...')
        for k in range(len(list_fid)):
            fid = list_fid[k]
            j = 0
            scale = 0.10
            xmin = -2*Lx*(1.05+scale)
            xmax =  2*Lx*(1.05+scale)
            ymin =   -Ly*(1.15+scale)
            ymax =    Ly*(1.15+scale)
            for kk in range(list_ptr2opt[k],list_ptr2opt[k+1]):
                plt.figure(num=0).clear()
                fig,ax = plt.subplots(nrows=1,ncols=3,num=0)
                x = list_top[kk]
                x = np.unpackbits(x,axis=None).astype(float)
                xt = np.ndarray((Nt),dtype=bool)
                for k in range(N):
                    xt[sym[k,:]] = x[k]
                dis_xx = list_dis_xx[kk]
                umat = np.reshape(dis_xx,coor.shape)
                coor_dis = coor + scale*umat
                polys = clct.PolyCollection(coor_dis[inci],cmap='gray_r',edgecolor=(0,0,0,0))
                polys.set_array(xt+1.0)
                polys.set_clim(0.0,2.0)
                ax[0].add_collection(polys)
                ax[0].set_aspect('equal')
                ax[0].set_xlim([xmin,xmax])
                ax[0].set_ylim([ymin,ymax])
                ax[0].axis('off')
                dis_yy = list_dis_yy[kk]
                umat = np.reshape(dis_yy,coor.shape)
                coor_dis = coor + scale*umat
                polys = clct.PolyCollection(coor_dis[inci],cmap='gray_r',edgecolor=(0,0,0,0))
                polys.set_array(xt+1.0)
                polys.set_clim(0.0,2.0)
                ax[1].add_collection(polys)
                ax[1].set_aspect('equal')
                ax[1].set_xlim([xmin,xmax])
                ax[1].set_ylim([ymin,ymax])
                ax[1].axis('off')
                dis_xy = list_dis_xy[kk]
                umat = np.reshape(dis_xy,coor.shape)
                coor_dis = coor + scale*umat
                polys = clct.PolyCollection(coor_dis[inci],cmap='gray_r',edgecolor=(0,0,0,0))
                polys.set_array(xt+1.0)
                polys.set_clim(0.0,2.0)
                ax[2].add_collection(polys)
                ax[2].set_aspect('equal')
                ax[2].set_xlim([xmin,xmax])
                ax[2].set_ylim([ymin,ymax])
                ax[2].axis('off')
                fig.set_size_inches(20,8)
                fig.savefig('./dis/f{:05d}_{:03d}.png'.format(fid,j),bbox_inches='tight',pad_inches=0,dpi=100)
                j += 1
                
    # Poisson's ratio, Young's modulus and volume
    if fig_nu_Ey_vol:
        print(': : Poisson\'s ratio, Young\'s modulus and volume...')
        for k in range(len(list_fid)):
            plt.figure(num=0).clear()
            fig,ax = plt.subplots(nrows=3,ncols=1,num=0)
            fid = list_fid[k]
            inp = list_inp[k]
            Eymin = inp[1]
            nu  = list_nu[list_ptr2opt[k]:list_ptr2opt[k+1]]
            Ey  = list_Ey[list_ptr2opt[k]:list_ptr2opt[k+1]]
            vol = list_vol[list_ptr2opt[k]:list_ptr2opt[k+1]]
            size = len(nu)
            delta = max(nu)-min(nu)
            miny = min(nu)-0.02*delta
            maxy = max(nu)+0.02*delta
            ax[0].plot(nu,'ok-',linewidth=2)
            ax[0].axis([-0.75, size-0.25, miny, maxy])
            ax[0].set_ylabel('Poisson\'s ratio',fontsize=18)
            ax[0].grid()
            delta = max(Ey)-min(Ey)
            miny = Eymin-0.02*delta
            maxy = max(Ey)+0.02*delta
            ax[1].plot(Ey,'ok-',linewidth=2)
            ax[1].plot([-0.75, size-0.25],[Eymin,Eymin],'k--',linewidth=2)
            ax[1].axis([-0.75, size-0.25, miny, maxy])
            ax[1].set_ylabel('Young\'s modulus [Pa]',fontsize=18)
            ax[1].grid()
            delta = max(vol)-min(vol)
            miny = min(vol)-0.02*delta
            maxy = max(vol)+0.02*delta
            ax[2].plot(vol,'ok-',linewidth=2)
            ax[2].axis([-0.75, size-0.25, miny, maxy])
            ax[2].set_ylabel('volume fraction',fontsize=18)
            ax[2].grid()
            ax[2].set_xlabel('iteration',fontsize=18)
            fig.set_size_inches(8,13)
            fig.savefig('./nu_Ey_vol/f{:05d}.png'.format(fid),bbox_inches='tight',pad_inches=0.05,dpi=100)

    # prepare to read next file
    file = file + 1

plt.close(fig=0)
print('done!')
