"""
Dataset Generation
Topology Optimization of the Base Cell of a Periodic Metamaterial
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2023
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Metamaterial-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2023 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

import numpy as np

def update(x,etype,sym,pk,Ketvec,P,Kg_coo,Zr,shift,Uhat,factor,elist,solve_sys=True):
    x[elist] = ~x[elist]
    for e in elist:
        if x[e]:
            for k in range(6):
                et = sym[e,k]
                ek = etype[et]
                Kg_coo.data[64*et:64*et+64] = Ketvec[ek,:]
        else:
            for k in range(6):
                et = sym[e,k]
                ek = etype[et]
                Kg_coo.data[64*et:64*et+64] = pk*Ketvec[ek,:]
    if solve_sys:
        Kg_csc = Kg_coo.tocsc()
        Kr = P.T @ Kg_csc @ P
        Kr = Kr + shift*Zr
        Kr.sort_indices()
        Kr.data = Kr.data - shift*Zr.data
        Fr = -P.T @ Kg_csc @ Uhat
        factor.cholesky_inplace(Kr)
        Ur = factor(Fr)
        Ug = Uhat + P @ Ur
        return Ug, Kr
    return

def ws(x,aug_etype,sym,P,factor,inci,Ug,Hlist):
    N = len(x)
    dC00_w = np.ndarray((N))
    dC11_w = np.ndarray((N))
    dC22_w = np.ndarray((N))
    eledofs = np.ndarray((6,8),dtype=np.uint32)
    for e in range(N):
        for k in range(6):
            et = sym[e,k]
            n0 = inci[et,0]
            n1 = inci[et,1]
            n2 = inci[et,2]
            n3 = inci[et,3]
            eledofs[k,:] = np.array([2*n0,2*n0+1,2*n1,2*n1+1,2*n2,2*n2+1,2*n3,2*n3+1])
        aug_ek = aug_etype[e]
        He = Hlist[aug_ek]
        size = He.shape
        elebool = np.ones((6,8),dtype=bool)
        aug_eledofs = np.ndarray((size[0]),dtype=np.uint32)
        kkk = 0
        for k in range(6):
            for kk in range(8):
                if elebool[k,kk]:
                    mask = (eledofs==eledofs[k,kk])
                    elebool[mask] = False
                    aug_eledofs[kkk] = eledofs[k,kk]
                    kkk = kkk + 1
        Ie = np.eye(size[1])
        Ue = Ug[aug_eledofs,:]
        Pe = P[aug_eledofs,:]
        Hr = Pe.T @ He
        Ahalf = factor.solve_L(factor.apply_P(Hr),use_LDLt_decomposition=False)
        Ae = Ahalf.T @ Ahalf
        Ve = He.T @ Ue
        if x[e]:
            dCh = -Ve.T @ np.linalg.solve(Ie-Ae,Ve)
        else:
            dCh =  Ve.T @ np.linalg.solve(Ie+Ae,Ve)
        dC00_w[e] = dCh[0,0]
        dC11_w[e] = dCh[1,1]
        dC22_w[e] = dCh[2,2]
    return dC00_w, dC11_w, dC22_w