"""
Dataset Generation
Topology Optimization of the Base Cell of a Periodic Metamaterial
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2023
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Metamaterial-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2023 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

import numpy as np

def get_mesh(Ns, Lex, Ley):
    N = Ns**2
    Nt = 6*N
    M = 1 + 6*Ns*(Ns+1)
    # coordinates matrix
    coor = np.ndarray((M,2))
    coor[0,:] = [0.0,0.0]
    for k in range(Ns):
        num = 1 + 6*k*(k+1)
        pts = np.array([[-2*k*Lex-1.5*Lex ,       -0.5*Ley],
                        [      -(k+1)*Lex ,     -(k+1)*Ley],
                        [          -k*Lex ,     -(k+1)*Ley],
                        [       (k+1)*Lex ,     -(k+1)*Ley],
                        [ k*Lex + 1.5*Lex , -k*Ley-0.5*Ley],
                        [     2*(k+1)*Lex ,            0.0],
                        [ 2*k*Lex+1.5*Lex ,        0.5*Ley],
                        [       (k+1)*Lex ,      (k+1)*Ley],
                        [           k*Lex ,      (k+1)*Ley],
                        [      -(k+1)*Lex ,      (k+1)*Ley],
                        [  -k*Lex-1.5*Lex ,  k*Ley+0.5*Ley],
                        [    -2*(k+1)*Lex ,            0.0]])
        for kk in range(6):
            coor[num+2*kk*(k+1):num+2*(kk+1)*(k+1),0] = np.linspace(pts[2*kk,0],pts[2*kk+1,0],2*(k+1))
            coor[num+2*kk*(k+1):num+2*(kk+1)*(k+1),1] = np.linspace(pts[2*kk,1],pts[2*kk+1,1],2*(k+1))
    # incidence matrix
    inci = np.ndarray((Nt,4),dtype=np.uint32)
    etype = np.ndarray((Nt),dtype=np.uint8)
    for k in range(Ns):
        for kk in range(6):
            ek = 6*(k**2) + 2*(kk+1)*k + kk
            etype[ek] = kk
            inci[ek,0] = (2*kk+1) + (14+2*kk)*k + 6*k*(k-1)
            inci[ek,1] = (2*kk+2) + (14+2*kk)*k + 6*k*(k-1)
            if kk == 5:
                inci[ek,2] = (2*kk+3) + (14+2*kk)*(k-1) + 6*(k-1)*(k-2)
            else:
                inci[ek,2] = (2*kk+3) + (14+2*kk)*k + 6*k*(k-1)
            inci[ek,3] = (2*kk+2) + (14+2*kk)*(k-1) + 6*(k-1)*(k-2)
    for k in range(1,Ns):
        for kk in range(6):
            ek = 6 + 18*(k-1) + 6*(k-2)*(k-1) + (2*k+1)*kk
            etype[ek:ek+2*k] = 6 + kk
            kkk = (kk-1)%6
            if kkk == 5:
                inci[ek:ek+2*k,0] = (2*kkk+3) + (14+2*kkk)*(k-1) + 6*(k-1)*(k-2)
                inci[ek:ek+2*k,1] = (2*kkk+4) + (14+2*kkk)*(k-1) + 6*(k-1)*(k-2)
                inci[ek:ek+2*k,2] = (2*kkk+3) + (14+2*kkk)*(k-2) + 6*(k-2)*(k-3)
                inci[ek:ek+2*k,3] = (2*kkk+2) + (14+2*kkk)*(k-2) + 6*(k-2)*(k-3)
            else:
                inci[ek:ek+2*k,0] = (2*kkk+3) + (14+2*kkk)*k + 6*k*(k-1)
                inci[ek:ek+2*k,1] = (2*kkk+4) + (14+2*kkk)*k + 6*k*(k-1)
                inci[ek:ek+2*k,2] = (2*kkk+3) + (14+2*kkk)*(k-1) + 6*(k-1)*(k-2)
                inci[ek:ek+2*k,3] = (2*kkk+2) + (14+2*kkk)*(k-1) + 6*(k-1)*(k-2)
            inci[ek:ek+2*k,:] = inci[ek:ek+2*k,:] + np.arange(2*k).reshape(2*k,1)
        ek = 6 + 18*(k-1) + 6*(k-2)*(k-1)
        inci[ek,3] = 12 + 24*(k-1) + 6*(k-1)*(k-2)
    # D3-symmetry map
    sym = np.ndarray((N,6),dtype=np.uint32)
    for k in range(Ns):
        for kk in range(6):
            ek = 6*(Ns-k-1)**2 + 2*(kk+1)*(Ns-k-1) + kk
            kkk = 1-2*(kk%2)
            sym[k*(Ns+1)::Ns,kk] = np.array(range(ek,ek+kkk*(Ns-k),kkk))
            if kk == 5:
                ek = 6*(Ns-k-2)**2 + 2*(kk+1)*(Ns-k-2) + kk
            sym[k*(Ns+1)+1:(k+1)*Ns,kk] = np.array(range(ek-kkk,ek-kkk*(Ns-k),-kkk))
    return coor, inci, etype, sym

def get_fmesh(Ns, Lx, Ly, Lex, Ley):
    N = Ns**2
    M = 1 + 6*Ns*(Ns+1)
    
    # left-bottom cell
    Mlb = 2*N + Ns
    coor_lb = np.ndarray((Mlb,2))
    coor_lb[0,:] = [0.0,0.0]
    for k in range(Ns-1):
        num = 1 + 5*k + 2*(k-1)*k
        pts = np.array([[   1.5*(k+1)*Lex , -0.5*(k+1)*Ley],
                        [     2*(k+1)*Lex ,            0.0],
                        [ 2*k*Lex+1.5*Lex ,        0.5*Ley],
                        [       (k+1)*Lex ,      (k+1)*Ley],
                        [           k*Lex ,      (k+1)*Ley],
                        [             0.0 ,      (k+1)*Ley]])
        coor_lb[num      :num+  k+2,0] = np.linspace(pts[0,0],pts[1,0],  k+2)
        coor_lb[num      :num+  k+2,1] = np.linspace(pts[0,1],pts[1,1],  k+2)
        coor_lb[num+  k+2:num+3*k+4,0] = np.linspace(pts[2,0],pts[3,0],2*k+2)
        coor_lb[num+  k+2:num+3*k+4,1] = np.linspace(pts[2,1],pts[3,1],2*k+2)
        coor_lb[num+3*k+4:num+4*k+5,0] = np.linspace(pts[4,0],pts[5,0],  k+1)
        coor_lb[num+3*k+4:num+4*k+5,1] = np.linspace(pts[4,1],pts[5,1],  k+1)
    k = Ns-1
    num = 1 + 5*k + 2*(k-1)*k
    pts = np.array([[   1.5*(k+1)*Lex , -0.5*(k+1)*Ley],
                    [ 2*k*Lex+1.5*Lex ,       -0.5*Ley],
                    [           k*Lex ,      (k+1)*Ley],
                    [             0.0 ,      (k+1)*Ley]])
    coor_lb[num    :num+  k+1,0] = np.linspace(pts[0,0],pts[1,0], k+1)
    coor_lb[num    :num+  k+1,1] = np.linspace(pts[0,1],pts[1,1], k+1)
    coor_lb[num+k+1:num+2*k+2,0] = np.linspace(pts[2,0],pts[3,0], k+1)
    coor_lb[num+k+1:num+2*k+2,1] = np.linspace(pts[2,1],pts[3,1], k+1)
    coor_lb = coor_lb - np.array([3*Lx,Ly])
    inci_lb = np.ndarray((2*N,4),dtype=np.uint32)
    etype_lb = np.ndarray((2*N),dtype=np.int8)
    for k in range(Ns-1):
        for kk in range(2):
            ek = 2*((k+kk)**2) + k - kk*(2*k+1)
            etype_lb[ek] = 2+kk        
            id1 = 1 + 5*(k+kk) + 2*(k-1+kk)*(k+kk) + (k+1) - 2*kk*(k+1) - kk
            id3 = 1 + 5*(k-1+kk) + 2*(k-2+kk)*(k-1+kk) + k - 2*kk*k - kk
            inci_lb[ek,0] = id1-1
            inci_lb[ek,1] = id1
            inci_lb[ek,2] = id1+1
            inci_lb[ek,3] = id3
    k = Ns-1
    for kk in range(2):
        ek = 2*((k+kk)**2) + k - kk*(2*k+1)
        etype_lb[ek] = 2+kk      
        if kk == 0:
            inci_lb[ek,0] = 2*(k**2) + 4*k + 1
            inci_lb[ek,1] = 6*k*(k+1) + 2*Ns - M
            inci_lb[ek,2] = 6*k*(k+1) + 2*Ns - 1 - M
            inci_lb[ek,3] = 2*(k**2)
        else:
            inci_lb[ek,0] = 6*k*(k+1) + 1 - M
            inci_lb[ek,1] = 6*(k+1)*(k+2) - M
            inci_lb[ek,2] = 2*(k**2) + 4*k + 3
            inci_lb[ek,3] = 2*(k**2) + 2*k
    for k in range(1,Ns-1):
        kkk = np.tile(np.arange(4*k),(2,1))
        kkk[0,  k:] = kkk[0,  k:] + 2
        kkk[0,3*k:] = kkk[0,3*k:] + 2
        for kk in range(3):
            ek = 2*(k**2) + kk + k*((kk*(kk+1))//2)
            etype_lb[ek:ek+((2-kk)*kk+1)*k] = 8 + kk
            n0 = 1 + 5*k + 2*(k-1)*k
            n1 = n0 + 1
            n2 = 2 + 5*(k-1) + 2*(k-2)*(k-1)
            n3 = n2 - 1
            inci_lb[ek:ek+((2-kk)*kk+1)*k,0] = n0 + kkk[0,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
            inci_lb[ek:ek+((2-kk)*kk+1)*k,1] = n1 + kkk[0,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
            inci_lb[ek:ek+((2-kk)*kk+1)*k,2] = n2 + kkk[1,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
            inci_lb[ek:ek+((2-kk)*kk+1)*k,3] = n3 + kkk[1,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
    k = Ns-1
    kkk = np.tile(np.arange(4*k),(2,1))
    kkk[0,k:3*k] = np.arange(0,-2*Ns+2,-1)
    kkk[0,3*k:] = kkk[0,3*k:] - 2*k + 1
    for kk in range(3):
        ek = 2*(k**2) + kk + k*((kk*(kk+1))//2)
        etype_lb[ek:ek+((2-kk)*kk+1)*k] = 8 + kk
        if kk == 1:
            n0 = 1 + 6*k*(k+1) + 2*(Ns-1) - M
            n1 = n0 - 1
        else:
            n0 = 1 + 5*k + 2*(k-1)*k
            n1 = n0 + 1
        n2 = 2 + 5*(k-1) + 2*(k-2)*(k-1)
        n3 = n2 - 1
        inci_lb[ek:ek+((2-kk)*kk+1)*k,0] = n0 + kkk[0,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
        inci_lb[ek:ek+((2-kk)*kk+1)*k,1] = n1 + kkk[0,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
        inci_lb[ek:ek+((2-kk)*kk+1)*k,2] = n2 + kkk[1,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
        inci_lb[ek:ek+((2-kk)*kk+1)*k,3] = n3 + kkk[1,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
    inci_lb = inci_lb + M
    sym_lb = np.ndarray((N,2),dtype=np.uint32)
    for k in range(Ns):
        for kk in range(2):
            ek = 2*((k+kk)**2) + k - kk*(2*k+1)
            sym_lb[N-1-k*(Ns+1):N-k*Ns,kk] = np.arange(ek,ek+(2*kk-1)*(k+1),2*kk-1)
    for k in range(Ns-1):
        for kk in range(2):
            sym_lb[(k+1)*Ns+k::Ns,kk] = np.arange(sym_lb[k*Ns+k,kk]+1-2*kk,sym_lb[k*Ns+k,kk]+(1-2*kk)*(Ns-k),1-2*kk)
    sym_lb = sym_lb + 6*N
    
    # bottom cell
    Mbot = 2*N
    coor_bot = np.ndarray((Mbot,2))
    coor_bot[0,:] = [0.0,0.0]
    for k in range(Ns-1):
        num = 1 + 5*k + 2*(k-1)*k
        pts = np.array([[  1.5*(k+1)*Lex , 0.5*(k+1)*Ley],
                        [      (k+1)*Lex ,     (k+1)*Ley],
                        [          k*Lex ,     (k+1)*Ley],
                        [     -(k+1)*Lex ,     (k+1)*Ley],
                        [ -k*Lex-1.5*Lex , k*Ley+0.5*Ley],
                        [ -1.5*(k+1)*Lex , 0.5*(k+1)*Ley]])
        coor_bot[num      :num+  k+2,0] = np.linspace(pts[0,0],pts[1,0],  k+2)
        coor_bot[num      :num+  k+2,1] = np.linspace(pts[0,1],pts[1,1],  k+2)
        coor_bot[num+  k+2:num+3*k+4,0] = np.linspace(pts[2,0],pts[3,0],2*k+2)
        coor_bot[num+  k+2:num+3*k+4,1] = np.linspace(pts[2,1],pts[3,1],2*k+2)
        coor_bot[num+3*k+4:num+4*k+5,0] = np.linspace(pts[4,0],pts[5,0],  k+1)
        coor_bot[num+3*k+4:num+4*k+5,1] = np.linspace(pts[4,1],pts[5,1],  k+1)
    k = Ns-1
    num = 1 + 5*k + 2*(k-1)*k
    pts = np.array([[   1.5*(k+1)*Lex , 0.5*(k+1)*Ley],
                    [ k*Lex + 1.5*Lex , k*Ley+0.5*Ley]])
    coor_bot[num:num+k+1,0] = np.linspace(pts[0,0],pts[1,0], k+1)
    coor_bot[num:num+k+1,1] = np.linspace(pts[0,1],pts[1,1], k+1)
    coor_bot = coor_bot - np.array([0.0,2*Ly])
    inci_bot = np.ndarray((2*N,4),dtype=np.uint32)
    etype_bot = np.ndarray((2*N),dtype=np.int8)
    for k in range(Ns-1):
        for kk in range(2):
            ek = 2*((k+kk)**2) + k - kk*(2*k+1)
            etype_bot[ek] = 3+kk        
            id1 = 1 + 5*(k+kk) + 2*(k-1+kk)*(k+kk) + (k+1) - 2*kk*(k+1) - kk
            id3 = 1 + 5*(k-1+kk) + 2*(k-2+kk)*(k-1+kk) + k - 2*kk*k - kk
            inci_bot[ek,0] = id1-1
            inci_bot[ek,1] = id1
            inci_bot[ek,2] = id1+1
            inci_bot[ek,3] = id3
    k = Ns-1
    for kk in range(2):
        ek = 2*((k+kk)**2) + k - kk*(2*k+1)
        etype_bot[ek] = 3+kk
        if kk == 0:
            inci_bot[ek,0] = 2*(k**2) + 4*k + 1
            inci_bot[ek,1] = 6*k*(k+1) + 4*Ns - M - Mlb
            inci_bot[ek,2] = 6*k*(k+1) + 4*Ns - 1 - M - Mlb
            inci_bot[ek,3] = 2*(k**2)
        else:
            inci_bot[ek,0] = 6*k*(k+1) + 2*Ns + 1 - M - Mlb
            inci_bot[ek,1] = 6*k*(k+1) + 2*Ns - M - Mlb
            inci_bot[ek,2] = 2*(k**2) + 4*k + 1 - Mlb
            inci_bot[ek,3] = 2*(k**2) + 2*k
    for k in range(1,Ns-1):
        kkk = np.tile(np.arange(4*k),(2,1))
        kkk[0,  k:] = kkk[0,  k:] + 2
        kkk[0,3*k:] = kkk[0,3*k:] + 2
        for kk in range(3):
            ek = 2*(k**2) + kk + k*((kk*(kk+1))//2)
            etype_bot[ek:ek+((2-kk)*kk+1)*k] = 9 + kk
            n0 = 1 + 5*k + 2*(k-1)*k
            n1 = n0 + 1
            n2 = 2 + 5*(k-1) + 2*(k-2)*(k-1)
            n3 = n2 - 1
            inci_bot[ek:ek+((2-kk)*kk+1)*k,0] = n0 + kkk[0,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
            inci_bot[ek:ek+((2-kk)*kk+1)*k,1] = n1 + kkk[0,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
            inci_bot[ek:ek+((2-kk)*kk+1)*k,2] = n2 + kkk[1,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
            inci_bot[ek:ek+((2-kk)*kk+1)*k,3] = n3 + kkk[1,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
    k = Ns-1
    kkk = np.tile(np.arange(4*k),(2,1))
    kkk[0,k:3*k] = np.arange(0,-2*Ns+2,-1)
    kkk[0,3*k:] = np.arange(k,0,-1) - Mlb
    for kk in range(3):
        ek = 2*(k**2) + kk + k*((kk*(kk+1))//2)
        etype_bot[ek:ek+((2-kk)*kk+1)*k] = 9 + kk
        if kk == 1:
            n0 = 4*Ns -1 + 6*k*(k+1) - M - Mlb
            n1 = n0 - 1
        else:
            n0 = 1 + 5*k + 2*(k-1)*k
            n1 = n0 + 1 - kk
        n2 = 2 + 5*(k-1) + 2*(k-2)*(k-1)
        n3 = n2 - 1
        inci_bot[ek:ek+((2-kk)*kk+1)*k,0] = n0 + kkk[0,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
        inci_bot[ek:ek+((2-kk)*kk+1)*k,1] = n1 + kkk[0,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
        inci_bot[ek:ek+((2-kk)*kk+1)*k,2] = n2 + kkk[1,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
        inci_bot[ek:ek+((2-kk)*kk+1)*k,3] = n3 + kkk[1,((kk*(kk+1))//2)*k:((-(kk**2)+5*kk+2)//2)*k]
    inci_bot = inci_bot + M + Mlb
    sym_bot = np.ndarray((N,2),dtype=np.uint32)
    for k in range(Ns):
        for kk in range(2):
            ek = 2*((k+kk)**2) + k - kk*(2*k+1)
            sym_bot[N-1-k*(Ns+1):N-k*Ns,kk] = np.arange(ek,ek+(1-2*kk)*(k+1),1-2*kk)
    for k in range(Ns-1):
        for kk in range(2):
            sym_bot[(k+1)*Ns+k::Ns,kk] = np.arange(sym_bot[k*Ns+k,kk]+2*kk-1,sym_bot[k*Ns+k,kk]+(2*kk-1)*(Ns-k),2*kk-1)
    sym_bot = sym_bot + 8*N
    return coor_lb, coor_bot, inci_lb, inci_bot, sym_lb, sym_bot