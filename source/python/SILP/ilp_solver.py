"""
Dataset Generation
Topology Optimization of the Base Cell of a Periodic Metamaterial
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2023
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Metamaterial-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2023 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

import numpy as np
import pulp as pp

def solve_ILP(N,x,alpha,alpha_h,h_bar,h_lim,dXmax,sense='min',sense_h='L',tLim=np.infty,rErr=None,verbose=False):
    # Integer Linear Programming problem
    if sense == 'min':  # minimization problem
        prob = pp.LpProblem('ILP', pp.LpMinimize)
    else:               # maximization problem
        prob = pp.LpProblem('ILP', pp.LpMaximize)
    variables = [f'{e:07d}' for e in range(N)]
    xvars = pp.LpVariable.dicts('x',variables,cat='Binary')

    # Objective Function
    # f(x) = f(xbar) + alpha * [x-xbar]
    # min/max { f(x) } = min/max { alpha * x }
    alpha_obj = dict(zip(variables,alpha))
    prob += pp.lpSum([alpha_obj[v] * xvars[v] for v in variables])
    
    # General Constraint
    # h(x) = h(xbar) + alpha_h * [x-xbar] <= (or >=) h_lim
    # alpha_h * x <= (or >=) b_h
    b_h = h_lim - h_bar + sum(alpha_h[x])
    alpha_hcon = dict(zip(variables,alpha_h))
    if sense_h == 'L':  # constraint : <=
        prob += pp.lpSum([alpha_hcon[v] * xvars[v] for v in variables]) <= b_h
    else:               # constraint : >=
        prob += pp.lpSum([alpha_hcon[v] * xvars[v] for v in variables]) >= b_h
    
    # Maximal Topological Change Constraint
    # g(x) = ||x-xbar||_1 <= dXmax
    # g(x) = g(xbar) + alpha_g * [x-xbar] <= dXmax
    # alpha_g * x <= b_g
    g_bar = 0.0
    alpha_g = np.ones(N)
    alpha_g[x] = -1.0
    b_g = dXmax - g_bar + sum(alpha_g[x])
    alpha_gcon = dict(zip(variables,alpha_g))  
    prob += pp.lpSum([alpha_gcon[v] * xvars[v] for v in variables]) <= b_g
    
    # Solve ILP
    prob.solve(solver=pp.COIN_CMD(msg=verbose, gapRel=rErr, timeLimit=tLim))
    y = np.array([v.varValue for v in prob.variables()],dtype=bool)
    if verbose:
        print('linearized objective variation = {:.1e}'.format(sum(alpha[y])-sum(alpha[x])))
    return y

def solve_BESO(N,x,alpha,dXmax,sense='min'):
    # Integer Linear Programming problem without extra constraints
    y = x.copy()
    if sense == 'min':  # minimization problem
        mask = (x & (alpha>0.0)) | (~x & (alpha<0.0))
    else:               # maximization problem
        mask = (x & (alpha<0.0)) | (~x & (alpha>0.0))
    Nv = sum(mask)
    if Nv == 0:
        return y
    xsub = x[mask]
    arg = np.argsort(abs(alpha[mask]))
    if Nv < dXmax:
        xsub = ~xsub
    else:
        xsub[arg[-dXmax:]] = ~xsub[arg[-dXmax:]]
    y[mask] = xsub
    return y