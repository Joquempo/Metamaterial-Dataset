"""
Dataset Generation
Topology Optimization of the Base Cell of a Periodic Metamaterial
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2023
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Metamaterial-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2023 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

# cython: boundscheck=False
# cython: wraparound=False
# cython: cdivision=True

cimport cython
from libc.stdlib cimport malloc, free

cdef void cgm_slv(double [:] ur, double [:] M, long long steps, double [:] data, long long [:] row_ind, long long [:] col_ptr, double [:] fr, long long Gr):
    cdef long long ks
    cdef long long k1
    cdef long long k2
    cdef long long ptr0
    cdef long long ptr1
    cdef double mu
    cdef double beta
    cdef double drxer
    cdef double drxgr
    cdef double erxqr
    cdef double *gr = <double *> malloc(Gr*sizeof(double))
    cdef double *dr = <double *> malloc(Gr*sizeof(double))
    cdef double *er = <double *> malloc(Gr*sizeof(double))
    cdef double *qr = <double *> malloc(Gr*sizeof(double))
    for k1 in range(Gr):
        gr[k1] = -fr[k1]
        ptr0 = col_ptr[k1]
        ptr1 = col_ptr[k1+1]
        for k2 in range(ptr0,ptr1):
            gr[k1] = gr[k1] + data[k2]*ur[row_ind[k2]]
        dr[k1] = -gr[k1]/M[k1]
    for ks in range(steps):
        drxer = 0.0
        drxgr = 0.0
        erxqr = 0.0
        for k1 in range(Gr):
            er[k1] = 0.0
            for k2 in range(col_ptr[k1],col_ptr[k1+1]):
                er[k1] = er[k1] + data[k2]*dr[row_ind[k2]]
            drxer += dr[k1]*er[k1]
            drxgr += dr[k1]*gr[k1]
        mu = -drxgr/drxer
        for k1 in range(Gr):
            ur[k1] = ur[k1] + mu*dr[k1]
            gr[k1] = gr[k1] + mu*er[k1]
            qr[k1] = gr[k1]/M[k1]
            erxqr += er[k1]*qr[k1]  
        beta = erxqr/drxer
        for k1 in range(Gr):
            dr[k1] = -qr[k1] + beta*dr[k1]
    free(gr)
    free(dr)
    free(er)
    free(qr)
    return

def cgm_solve(ur,Kr_csc,fr,Gr,steps=1,precond="I"):
    M = Kr_csc.diagonal()
    if precond == "I":
        M[:] = 1.0
    data = Kr_csc.data
    row_ind = Kr_csc.indices.astype("int64")
    col_ptr = Kr_csc.indptr.astype("int64")
    cgm_slv(ur,M,steps,data,row_ind,col_ptr,fr,Gr)
    return